/**
 * @fileoverview gRPC-Web generated client stub for api
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.25.3
// source: api.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as api_pb from './api_pb';


export class ApiServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorhandlerHealthz = new grpcWeb.MethodDescriptor(
    '/api.ApiService/handlerHealthz',
    grpcWeb.MethodType.UNARY,
    api_pb.HealthzRequest,
    api_pb.HealthzResponse,
    (request: api_pb.HealthzRequest) => {
      return request.serializeBinary();
    },
    api_pb.HealthzResponse.deserializeBinary
  );

  handlerHealthz(
    request: api_pb.HealthzRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.HealthzResponse>;

  handlerHealthz(
    request: api_pb.HealthzRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.HealthzResponse) => void): grpcWeb.ClientReadableStream<api_pb.HealthzResponse>;

  handlerHealthz(
    request: api_pb.HealthzRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.HealthzResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/api.ApiService/handlerHealthz',
        request,
        metadata || {},
        this.methodDescriptorhandlerHealthz,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/api.ApiService/handlerHealthz',
    request,
    metadata || {},
    this.methodDescriptorhandlerHealthz);
  }

  methodDescriptorhandlerErr = new grpcWeb.MethodDescriptor(
    '/api.ApiService/handlerErr',
    grpcWeb.MethodType.UNARY,
    api_pb.ErrRequest,
    api_pb.ErrResponse,
    (request: api_pb.ErrRequest) => {
      return request.serializeBinary();
    },
    api_pb.ErrResponse.deserializeBinary
  );

  handlerErr(
    request: api_pb.ErrRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.ErrResponse>;

  handlerErr(
    request: api_pb.ErrRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.ErrResponse) => void): grpcWeb.ClientReadableStream<api_pb.ErrResponse>;

  handlerErr(
    request: api_pb.ErrRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.ErrResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/api.ApiService/handlerErr',
        request,
        metadata || {},
        this.methodDescriptorhandlerErr,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/api.ApiService/handlerErr',
    request,
    metadata || {},
    this.methodDescriptorhandlerErr);
  }

  methodDescriptorCheckReadiness = new grpcWeb.MethodDescriptor(
    '/api.ApiService/CheckReadiness',
    grpcWeb.MethodType.UNARY,
    api_pb.ReadinessRequest,
    api_pb.ReadinessResponse,
    (request: api_pb.ReadinessRequest) => {
      return request.serializeBinary();
    },
    api_pb.ReadinessResponse.deserializeBinary
  );

  checkReadiness(
    request: api_pb.ReadinessRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.ReadinessResponse>;

  checkReadiness(
    request: api_pb.ReadinessRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.ReadinessResponse) => void): grpcWeb.ClientReadableStream<api_pb.ReadinessResponse>;

  checkReadiness(
    request: api_pb.ReadinessRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.ReadinessResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/api.ApiService/CheckReadiness',
        request,
        metadata || {},
        this.methodDescriptorCheckReadiness,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/api.ApiService/CheckReadiness',
    request,
    metadata || {},
    this.methodDescriptorCheckReadiness);
  }

  methodDescriptorhandlerCreateUser = new grpcWeb.MethodDescriptor(
    '/api.ApiService/handlerCreateUser',
    grpcWeb.MethodType.UNARY,
    api_pb.CreateUserRequest,
    api_pb.User,
    (request: api_pb.CreateUserRequest) => {
      return request.serializeBinary();
    },
    api_pb.User.deserializeBinary
  );

  handlerCreateUser(
    request: api_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.User>;

  handlerCreateUser(
    request: api_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.User) => void): grpcWeb.ClientReadableStream<api_pb.User>;

  handlerCreateUser(
    request: api_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/api.ApiService/handlerCreateUser',
        request,
        metadata || {},
        this.methodDescriptorhandlerCreateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/api.ApiService/handlerCreateUser',
    request,
    metadata || {},
    this.methodDescriptorhandlerCreateUser);
  }

  methodDescriptorhandlerGetUser = new grpcWeb.MethodDescriptor(
    '/api.ApiService/handlerGetUser',
    grpcWeb.MethodType.UNARY,
    api_pb.GetUserRequest,
    api_pb.User,
    (request: api_pb.GetUserRequest) => {
      return request.serializeBinary();
    },
    api_pb.User.deserializeBinary
  );

  handlerGetUser(
    request: api_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.User>;

  handlerGetUser(
    request: api_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.User) => void): grpcWeb.ClientReadableStream<api_pb.User>;

  handlerGetUser(
    request: api_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/api.ApiService/handlerGetUser',
        request,
        metadata || {},
        this.methodDescriptorhandlerGetUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/api.ApiService/handlerGetUser',
    request,
    metadata || {},
    this.methodDescriptorhandlerGetUser);
  }

  methodDescriptorhandlerCreateFeed = new grpcWeb.MethodDescriptor(
    '/api.ApiService/handlerCreateFeed',
    grpcWeb.MethodType.UNARY,
    api_pb.CreateFeedRequest,
    api_pb.Feed,
    (request: api_pb.CreateFeedRequest) => {
      return request.serializeBinary();
    },
    api_pb.Feed.deserializeBinary
  );

  handlerCreateFeed(
    request: api_pb.CreateFeedRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.Feed>;

  handlerCreateFeed(
    request: api_pb.CreateFeedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.Feed) => void): grpcWeb.ClientReadableStream<api_pb.Feed>;

  handlerCreateFeed(
    request: api_pb.CreateFeedRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.Feed) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/api.ApiService/handlerCreateFeed',
        request,
        metadata || {},
        this.methodDescriptorhandlerCreateFeed,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/api.ApiService/handlerCreateFeed',
    request,
    metadata || {},
    this.methodDescriptorhandlerCreateFeed);
  }

  methodDescriptorhandlerGetFeeds = new grpcWeb.MethodDescriptor(
    '/api.ApiService/handlerGetFeeds',
    grpcWeb.MethodType.SERVER_STREAMING,
    api_pb.GetFeedsRequest,
    api_pb.Feed,
    (request: api_pb.GetFeedsRequest) => {
      return request.serializeBinary();
    },
    api_pb.Feed.deserializeBinary
  );

  handlerGetFeeds(
    request: api_pb.GetFeedsRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<api_pb.Feed> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/api.ApiService/handlerGetFeeds',
      request,
      metadata || {},
      this.methodDescriptorhandlerGetFeeds);
  }

  methodDescriptorhandlerCreateFeedFollow = new grpcWeb.MethodDescriptor(
    '/api.ApiService/handlerCreateFeedFollow',
    grpcWeb.MethodType.UNARY,
    api_pb.CreateFeedFollowRequest,
    api_pb.FeedFollow,
    (request: api_pb.CreateFeedFollowRequest) => {
      return request.serializeBinary();
    },
    api_pb.FeedFollow.deserializeBinary
  );

  handlerCreateFeedFollow(
    request: api_pb.CreateFeedFollowRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.FeedFollow>;

  handlerCreateFeedFollow(
    request: api_pb.CreateFeedFollowRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.FeedFollow) => void): grpcWeb.ClientReadableStream<api_pb.FeedFollow>;

  handlerCreateFeedFollow(
    request: api_pb.CreateFeedFollowRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.FeedFollow) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/api.ApiService/handlerCreateFeedFollow',
        request,
        metadata || {},
        this.methodDescriptorhandlerCreateFeedFollow,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/api.ApiService/handlerCreateFeedFollow',
    request,
    metadata || {},
    this.methodDescriptorhandlerCreateFeedFollow);
  }

  methodDescriptorhandlerGetFeedFollows = new grpcWeb.MethodDescriptor(
    '/api.ApiService/handlerGetFeedFollows',
    grpcWeb.MethodType.SERVER_STREAMING,
    api_pb.GetFeedFollowsRequest,
    api_pb.FeedFollow,
    (request: api_pb.GetFeedFollowsRequest) => {
      return request.serializeBinary();
    },
    api_pb.FeedFollow.deserializeBinary
  );

  handlerGetFeedFollows(
    request: api_pb.GetFeedFollowsRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<api_pb.FeedFollow> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/api.ApiService/handlerGetFeedFollows',
      request,
      metadata || {},
      this.methodDescriptorhandlerGetFeedFollows);
  }

  methodDescriptorhandlerDeleteFeedFollows = new grpcWeb.MethodDescriptor(
    '/api.ApiService/handlerDeleteFeedFollows',
    grpcWeb.MethodType.UNARY,
    api_pb.DeleteFeedFollowsRequest,
    api_pb.Empty,
    (request: api_pb.DeleteFeedFollowsRequest) => {
      return request.serializeBinary();
    },
    api_pb.Empty.deserializeBinary
  );

  handlerDeleteFeedFollows(
    request: api_pb.DeleteFeedFollowsRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.Empty>;

  handlerDeleteFeedFollows(
    request: api_pb.DeleteFeedFollowsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.Empty) => void): grpcWeb.ClientReadableStream<api_pb.Empty>;

  handlerDeleteFeedFollows(
    request: api_pb.DeleteFeedFollowsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/api.ApiService/handlerDeleteFeedFollows',
        request,
        metadata || {},
        this.methodDescriptorhandlerDeleteFeedFollows,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/api.ApiService/handlerDeleteFeedFollows',
    request,
    metadata || {},
    this.methodDescriptorhandlerDeleteFeedFollows);
  }

  methodDescriptorhandlerGetPostsForUser = new grpcWeb.MethodDescriptor(
    '/api.ApiService/handlerGetPostsForUser',
    grpcWeb.MethodType.SERVER_STREAMING,
    api_pb.GetPostsForUserRequest,
    api_pb.Post,
    (request: api_pb.GetPostsForUserRequest) => {
      return request.serializeBinary();
    },
    api_pb.Post.deserializeBinary
  );

  handlerGetPostsForUser(
    request: api_pb.GetPostsForUserRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<api_pb.Post> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/api.ApiService/handlerGetPostsForUser',
      request,
      metadata || {},
      this.methodDescriptorhandlerGetPostsForUser);
  }

  methodDescriptorhandlerView = new grpcWeb.MethodDescriptor(
    '/api.ApiService/handlerView',
    grpcWeb.MethodType.UNARY,
    api_pb.ViewRequest,
    api_pb.ViewResponse,
    (request: api_pb.ViewRequest) => {
      return request.serializeBinary();
    },
    api_pb.ViewResponse.deserializeBinary
  );

  handlerView(
    request: api_pb.ViewRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.ViewResponse>;

  handlerView(
    request: api_pb.ViewRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.ViewResponse) => void): grpcWeb.ClientReadableStream<api_pb.ViewResponse>;

  handlerView(
    request: api_pb.ViewRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.ViewResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/api.ApiService/handlerView',
        request,
        metadata || {},
        this.methodDescriptorhandlerView,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/api.ApiService/handlerView',
    request,
    metadata || {},
    this.methodDescriptorhandlerView);
  }

}

